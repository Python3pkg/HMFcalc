'''
Created on May 4, 2012

@author: smurray

This module contains one function "mf()", which uses both 
MassFunctionClasses and SetupFunctions to find the mass
function for several parameters (z,WDM,approach).

Ie. This file is basically a script to use the other modules.
'''

#===================================================================
#    IMPORT LOCAL MODULES AND CONFIG FILES
#===================================================================
import MassFunctionClasses as mfc
import SetupFunctions as setup

#===================================================================
#    IMPORT EXTERNAL MODULES
#===================================================================    
import numpy as np
import matplotlib
matplotlib.use("AGG")
import os


#===================================================================                      
#    THE ACTUAL FUNCTION 
#===================================================================     
def mf(transfer_file,  #File produced by CAMB containing the transfer function.
       configz,        #The redshifts from the form
       configWDM,      #The WDM masses from the form
       configapproach, #The approaches from the form
       cosmology,      #The cosmology from the form
#       extrapolate,    #Whether to extrapolate
       k_begins_at,    #Where k begins
       k_ends_at,      #Where k ends (truncated)
       min_M, max_M,   #Minimum and Maximum mass to calculate for
       M_step,         #Step size in log(M)
       user_model,     #An optional mass function model from the user
       camb_dict,      #The parameters for camb to use    
       debug,          #How much info to print out
       get_ngtm        #Whether to calculate n(>m)
       ):    

    #----------------- SETUP THE CALCULATIONS-----------------------     
    # Use the convenience function Setup() to import the transfer
    # function, set up a vector of radii, establish a step-size for
    # Romberg integration, and create output directories.
    # If use_camb is true, then CAMB operations will also be performed
    os.chdir(os.path.dirname(setup.__file__))
    if debug:
        print "Changed working directory to:", os.getcwd()
        
    k_vector, transfer, masses = setup.Setup(transfer_file,min_M,max_M,M_step,camb_dict)


    if debug:
        print "k_vector:", k_vector
        print "transfer function:", transfer
        print "masses:", masses
        
    masses = 10**masses
    
    if debug:
        print "changed masses to real mass"

    #---------------- FIND RELEVANT QUANTITIES---------------------- 
    # Loop through all the parameters, calculating the mass function
    # for each.

    mass_func = np.zeros((len(configapproach),len(configz),len(configWDM)+1,masses.shape[0]))
    f = np.zeros((len(configapproach),len(configz),len(configWDM)+1,masses.shape[0]))
    
    if get_ngtm:
        ngtm = np.zeros((len(configapproach),len(configz),len(configWDM)+1,masses.shape[0]))
        Mgtm = np.zeros((len(configapproach),len(configz),len(configWDM)+1,masses.shape[0]))
    
    for i,wdm in enumerate([None]+configWDM):
        for j,z in enumerate(configz):
            

            pert = mfc.Perturbations(masses,k_vector,transfer,z,0.0125,cosmology,wdm,[k_begins_at,k_ends_at],"ST",user_model,get_ngtm)
            
            if i==0 and j==0:
                   k_power = pert.k_extended
                   power_spec = np.zeros((len(configz),len(configWDM)+1,len(k_power)))

            power_spec[j,i,:] = pert.power_spectrum
            
            if j==0:
                if i == 0:
                    power_spec = np.atleast_2d(pert.power_spectrum)
                else:
                    power_spec = np.append(power_spec,[pert.power_spectrum],axis=0)
                if debug:
                    print "Found Power Spectrum"
                    
            for k,approach in enumerate(configapproach): 
                    pert.approach = approach
                    
                    mass_func[k,j,i,:] = pert.MassFunction()       
                    f[k,j,i,:] = pert.vfv 
                    if get_ngtm:
                        ngtm[k,j,i,:] = pert.ngtm
                        Mgtm[k,j,i,:] = pert.Mgtm
 


    if get_ngtm:
        return np.log10(masses), mass_func, pert.sigma,pert.lnsigma,pert.n_eff,f, k_power, power_spec, ngtm, Mgtm
    else:
        return np.log10(masses), mass_func, pert.sigma,pert.lnsigma,pert.n_eff,f, k_power, power_spec
        
                    
 

            
        
    
    
    
    
